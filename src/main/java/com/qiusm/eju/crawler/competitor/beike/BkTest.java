package com.qiusm.eju.crawler.competitor.beike;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.qiusm.eju.crawler.competitor.beike.utils.BeikeUtils;
import com.qiusm.eju.crawler.utils.FileUtils;
import com.qiusm.eju.crawler.utils.http.OkHttpUtils;
import lombok.extern.slf4j.Slf4j;

import java.io.File;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;

import static com.qiusm.eju.crawler.constant.CharacterSet.UTF8;
import static com.qiusm.eju.crawler.constant.EjuConstant.PROXY_URL0;
import static com.qiusm.eju.crawler.constant.SymbolicConstant.COMMA;
import static com.qiusm.eju.crawler.constant.SymbolicConstant.SEMICOLON;
import static java.math.BigDecimal.ROUND_UP;

/**
 * @author qiushengming
 */
@Slf4j
public class BkTest {

    protected static OkHttpUtils httpUtils = OkHttpUtils.Builder()
            .proxyUrl(PROXY_URL0).charset(UTF8)
            .connectTimeout(60000).readTimeout(60000)
            .builderHttp();

    protected static final String APP_DOMAIN_NAME = "https://app.api.ke.com";

    protected static Map<String, String> heads(String url) {
        Map<String, String> heads = new HashMap<>(16);
        heads.put("Accept", "application/json");
        heads.put("Accept-Encoding", "utf-8");
        heads.put("Referer", "ershoulistsearch");
        heads.put("Cookie", "lianjia_udid=bfaa183c70b47681;lianjia_token=2.0014c2fed773f3c0cf056fd7e6568b1c66;lianjia_ssid=97b3ff8b-cfee-4633-8418-21c3802e2d83;lianjia_uuid=359ab4e2-6e30-4cbe-a300-5c676b76c3ee");
        heads.put("Lianjia-City-Id", "310000");
        heads.put("User-Agent", "Beike2.20.1;google Pixel; Android 8.1.0");
        heads.put("Lianjia-Channel", "Android_ke_wandoujia");
        heads.put("Lianjia-Version", "2.20.1");
        heads.put("Authorization", BeikeUtils.authorization(url));
        heads.put("Lianjia-Im-Version", "2.34.0");
        heads.put("Host", "app.api.ke.com");
        heads.put("Connection", "Keep-Alive");
        return heads;
    }

    public static void main(String[] args) {
        String fenceStr = "117.135613,39.178379;117.10692946085,39.182254253148;117.091668,39.179722;117.08211,39.175247;117.079698,39.173698;117.077614,39.172635;117.075817,39.171964;117.073738,39.171499;117.058431,39.166128;117.05327,39.165139;117.046047,39.165391;117.043676,39.164691;117.040837,39.16346;117.038322,39.169307;117.03825,39.171405;117.03825,39.173558;117.038286,39.176859;117.033399,39.176607;117.032824,39.16844;117.031171,39.167936;117.031171,39.165419;117.035699,39.161334;117.017919,39.166906;117.008703,39.180038;117.004642,39.181296;116.998893,39.183086;116.981394,39.179562;116.973058,39.177884;116.965081,39.176794;116.958649,39.173801;116.955092,39.173577;116.951283,39.169354;116.940162,39.148889;116.937287,39.129636;116.939868,39.116798;116.934262,39.114782;116.926501,39.116238;116.916332,39.110177;116.912954,39.109449;116.908786,39.096458;116.905049,39.097242;116.901169,39.09041;116.897001,39.09125;116.893407,39.083577;116.88967,39.083745;116.888521,39.078255;116.887694,39.074684;116.888844,39.070763;116.892006,39.068522;116.894881,39.065678;116.89815,39.062513;116.902714,39.063942;116.90469,39.064838;116.907672,39.065987;116.909792,39.067051;116.910942,39.066575;116.916835,39.063101;116.919494,39.065174;116.927112,39.06383;116.928837,39.064446;116.948096,39.054472;116.95557,39.062093;116.954923,39.058955;116.967212,39.054808;116.965919,39.052623;116.970087,39.051334;116.969871,39.045226;116.99294,39.04248;117.02719,39.031443;117.045587,39.022698;117.05766,39.015073;117.081232,39.00027;117.134699,38.973123;117.162582,38.943495;117.191328,38.912732;117.25385,38.857123;117.296681,38.842961;117.337152,38.831419;117.34362,38.83007;117.346117,38.833218;117.351938,38.835129;117.346836,38.841874;117.341734,38.847101;117.345525,38.850445;117.343261,38.856542;117.348579,38.859352;117.34689,38.86455;117.344698,38.866347;117.34053,38.876516;117.337224,38.882471;117.334206,38.881909;117.32781,38.891879;117.314443,38.89129;117.307688,38.89612;117.275564,38.925486;117.279158,38.929303;117.268953,38.935141;117.273768,38.949622;117.247969,38.959666;117.250556,38.961125;117.259251,38.960115;117.280595,38.976105;117.274424,38.979604;117.279921,38.985648;117.285042,38.982703;117.287647,38.980852;117.288886,38.978805;117.289569,38.983404;117.291076,38.985351;117.293376,38.988492;117.294388,38.995253;117.297766,39.001197;117.296239,39.003006;117.2963227930473,39.0033004563871;117.2961071997249,39.00349672347219;117.29598143695351,39.00380514206821;117.29546041975772,39.004057483547555;117.29519092810473,39.004393937441755;117.29465194479874,39.0046602956305;117.294281,39.004898;117.285935,39.009952;117.27753,39.022866;117.271113,39.026673;117.266622,39.026729;117.267403,39.027752;117.270934,39.027668;117.268688,39.033274;117.269083,39.03588;117.269766,39.03815;117.27044,39.040091;117.27185,39.044988;117.265544,39.044147;117.261897,39.043222;117.259148,39.04241;117.257998,39.046459;117.257154,39.046263;117.256004,39.04594;117.25507,39.045702;117.25392,39.045408;117.252617,39.045156;117.25197,39.045009;117.251369,39.044826;117.250587,39.044812;117.251723,39.042283;117.250336,39.042022;117.248157,39.041598;117.247834,39.041977;117.24756,39.042835;117.247524,39.042936;117.247546,39.042943;117.24743,39.042914;117.2461,39.043629;117.244214,39.045359;117.244393,39.046473;117.244294,39.045362;117.24486,39.044848;117.246388,39.043495;117.247582,39.04304;117.247708,39.042999;117.247582,39.042852;117.247524,39.042852;117.247537,39.042894;117.247762,39.042957;117.247636,39.042621;117.245561,39.044157;117.244276,39.045397;117.245597,39.044143;117.246603,39.043414;117.247555,39.042854;117.247618,39.043015;117.246379,39.043477;117.245606,39.044157;117.244276,39.045425;117.244357,39.045453;117.246495,39.046462;117.24539,39.046767;117.246922,39.046385;117.246684,39.046728;117.246446,39.047044;117.246208,39.047401;117.245947,39.04815;117.245036,39.047926;117.245175,39.047285;117.245323,39.046749;117.244672,39.04648;117.244429,39.04649;117.244115,39.04751;117.243329,39.047488;117.24266,39.047338;117.240117,39.046883;117.239843,39.047758;117.239776,39.04842;117.238716,39.04842;117.238572,39.048883;117.238393,39.050031;117.238141,39.051474;117.236497,39.051348;117.235249,39.051124;117.234121,39.050791;117.231426,39.053733;117.230294,39.054917;117.229163,39.056178;117.22821,39.057453;117.227141,39.058678;117.225983,39.060114;117.224707,39.061466;117.223494,39.062656;117.223247,39.056908;117.22163,39.057076;117.221037,39.062749;117.219456,39.062975;117.217624,39.063816;117.2173,39.067037;117.217628,39.069303;117.216838,39.070199;117.215589,39.071522;117.214358,39.07286;117.210803,39.077126;117.19328,39.071239;117.194403,39.069068;117.193558,39.068557;117.191896,39.068319;117.190522,39.070574;117.176508,39.066795;117.176041,39.066806;117.175776,39.066802;117.175237,39.066845;117.174456,39.066953;117.172929,39.067349;117.171455,39.068112;117.168936,39.07019;117.165612,39.067767;117.163007,39.069882;117.162037,39.070918;117.16121,39.071676;117.160276,39.072026;117.15706,39.073861;117.155975,39.074397;117.155041,39.074873;117.152921,39.076105;117.149759,39.078276;117.149478,39.078297;117.149101,39.078661;117.148598,39.078703;117.14849,39.078801;117.148203,39.078969;117.146658,39.079726;117.146377,39.080207;117.140304,39.08396;117.133801,39.087292;117.128112,39.090189;117.128903,39.090588;117.129684,39.091029;117.130978,39.091631;117.132128,39.092254;117.132909,39.092647;117.133798,39.093053;117.13467,39.093473;117.135532,39.093851;117.136736,39.094404;117.137931,39.095069;117.139062,39.095664;117.140329,39.096308;117.141614,39.096917;117.142772,39.097456;117.13767,39.113043;117.136994,39.122471;117.116749,39.139829;117.128519,39.149463;117.127162,39.15047;117.128456,39.151554;117.126866,39.152736;117.121793,39.151948;117.121348,39.152336;117.121339,39.152805;117.121132,39.15326;117.121042,39.153476;117.120998,39.153721;117.120962,39.154008;117.120872,39.154644;117.120728,39.155736;117.120764,39.158631;117.120638,39.159484;117.11523,39.15996;117.115433,39.160425;117.115181,39.161348;117.114822,39.162691;117.1136,39.165433;117.115217,39.169125;117.131674,39.171083;117.133962,39.171256";
        BigDecimal longitudeStep = new BigDecimal("0.096");
        BigDecimal latitudeStep = new BigDecimal("0.08");
        // 最多走几步
        BigDecimal maxStepNum = new BigDecimal("3");

        TreeSet<BigDecimal> lnSet = new TreeSet<>();
        TreeSet<BigDecimal> latSet = new TreeSet<>();

        for (String singleBorder : fenceStr.split(SEMICOLON)) {
            String[] var1 = singleBorder.split(COMMA);
            lnSet.add(new BigDecimal(var1[0]));
            latSet.add(new BigDecimal(var1[1]));
        }

        BigDecimal minLng = lnSet.first();
        BigDecimal minLat = latSet.first();

        BigDecimal maxLng = lnSet.last();
        BigDecimal maxLat = latSet.last();

        // 如果按照当前步长，走的步数超过3次，则步长进行调整。步长 = 长度 / 步数(3)
        if (maxLng.subtract(minLng).divide(longitudeStep, ROUND_UP).compareTo(maxStepNum) > 0) {
            longitudeStep = maxLng.subtract(minLng).divide(maxStepNum, ROUND_UP);
        }

        // 如果按照当前步长，走的步数超过3次，则步长进行调整。步长 = 长度 / 步数(3)
        if (maxLat.subtract(minLat).divide(latitudeStep, ROUND_UP).compareTo(maxStepNum) > 0) {
            latitudeStep = maxLat.subtract(minLat).divide(maxStepNum, ROUND_UP);
        }

        int i = 0;
        BigDecimal tempMaxLng = minLng.add(longitudeStep);
        StringBuilder latStr = new StringBuilder();
        StringBuilder lngStr = new StringBuilder();
        while (maxLng.compareTo(minLng) > 0) {
            BigDecimal tempMaxLat = minLat.add(latitudeStep);
            BigDecimal tempMinLat = new BigDecimal(minLat.toString());
            while (maxLat.compareTo(tempMinLat) > 0) {
                latStr.append(tempMaxLat).append(",").append(tempMinLat).append(",");
                lngStr.append(tempMaxLng).append(",").append(minLng).append(",");
                tempMinLat = tempMaxLat;
                tempMaxLat = tempMinLat.add(latitudeStep);
                log.info("{},{},{},{}", tempMaxLat, tempMinLat, tempMaxLng, minLng);
            }
            // 经度前移
            minLng = tempMaxLng;
            tempMaxLng = tempMaxLng.add(longitudeStep);
        }
        log.info("纬度列表：{}", latStr);
        log.info("经度列表：{}", lngStr);
        System.out.println(1);
    }
}
